/*
* generated by Xtext
*/
package org.xtext.actionscript.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.CharStream;
import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.common.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.common.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.common.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import org.xtext.actionscript.services.actionscript3GrammarAccess;

public class actionscript3Parser extends AbstractContentAssistParser {
	
	@Inject
	private actionscript3GrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected org.xtext.actionscript.contentassist.antlr.internal.Internalactionscript3Lexer createLexer(CharStream stream) {
		return new org.xtext.actionscript.contentassist.antlr.internal.Internalactionscript3Lexer(stream);
	}
	
	@Override
	protected org.xtext.actionscript.contentassist.antlr.internal.Internalactionscript3Parser createParser() {
		org.xtext.actionscript.contentassist.antlr.internal.Internalactionscript3Parser result = new org.xtext.actionscript.contentassist.antlr.internal.Internalactionscript3Parser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				{
					put(grammarAccess.getTypeAccess().getAlternatives(), "rule__Type__Alternatives");
					put(grammarAccess.getPropertyAccess().getAlternatives(), "rule__Property__Alternatives");
					put(grammarAccess.getPublicAccess().getAlternatives(), "rule__Public__Alternatives");
					put(grammarAccess.getPrivateAccess().getAlternatives(), "rule__Private__Alternatives");
					put(grammarAccess.getVariablesAccess().getAlternatives(), "rule__Variables__Alternatives");
					put(grammarAccess.getModelAccess().getGroup(), "rule__Model__Group");
					put(grammarAccess.getImportAccess().getGroup(), "rule__Import__Group");
					put(grammarAccess.getPublicAccess().getGroup_0(), "rule__Public__Group_0");
					put(grammarAccess.getPublicAccess().getGroup_1(), "rule__Public__Group_1");
					put(grammarAccess.getPublicAccess().getGroup_2(), "rule__Public__Group_2");
					put(grammarAccess.getPrivateAccess().getGroup_0(), "rule__Private__Group_0");
					put(grammarAccess.getPrivateAccess().getGroup_1(), "rule__Private__Group_1");
					put(grammarAccess.getPrivateAccess().getGroup_2(), "rule__Private__Group_2");
					put(grammarAccess.getClassAccess().getGroup(), "rule__Class__Group");
					put(grammarAccess.getClassAccess().getGroup_2(), "rule__Class__Group_2");
					put(grammarAccess.getFunctionAccess().getGroup(), "rule__Function__Group");
					put(grammarAccess.getVariablesAccess().getGroup_0(), "rule__Variables__Group_0");
					put(grammarAccess.getVariablesAccess().getGroup_1(), "rule__Variables__Group_1");
					put(grammarAccess.getVariablesAccess().getGroup_2(), "rule__Variables__Group_2");
					put(grammarAccess.getVariablesAccess().getGroup_3(), "rule__Variables__Group_3");
					put(grammarAccess.getUNITAccess().getGroup(), "rule__UNIT__Group");
					put(grammarAccess.getUNITAccess().getGroup_3(), "rule__UNIT__Group_3");
					put(grammarAccess.get_StringAccess().getGroup(), "rule___String__Group");
					put(grammarAccess.get_StringAccess().getGroup_3(), "rule___String__Group_3");
					put(grammarAccess.get_intAccess().getGroup(), "rule___int__Group");
					put(grammarAccess.get_intAccess().getGroup_3(), "rule___int__Group_3");
					put(grammarAccess.getNumberAccess().getGroup(), "rule__Number__Group");
					put(grammarAccess.getNumberAccess().getGroup_3(), "rule__Number__Group_3");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			org.xtext.actionscript.contentassist.antlr.internal.Internalactionscript3Parser typedParser = (org.xtext.actionscript.contentassist.antlr.internal.Internalactionscript3Parser) parser;
			typedParser.entryRuleModel();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public actionscript3GrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(actionscript3GrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
